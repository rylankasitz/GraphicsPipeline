
struct VertexDataInput {
	float4 vertex: POSITION;
  float3 color: COLOR;
  float3 normal: NORMAL;
  float2 texCoord : TEXCOORD0;
};

struct VertexDataOutput {
	float4 projv : POSITION;
  float3 color : COLOR;
  float3 normal: TEXCOORD0;
  float2 texCoord : TEXCOORD1;
	float3 vxyz: TEXCOORD2;
};

struct PixelDataOutput {
	float3 color : COLOR;
};

VertexDataOutput VertexMain(VertexDataInput vdi, uniform float4x4 modelViewProj) {

  VertexDataOutput ret;

  ret.projv = mul(modelViewProj, vdi.vertex);
  ret.normal = vdi.normal;
  ret.vxyz = vdi.vertex.xyz;
  ret.color = vdi.color;
  ret.texCoord = vdi.texCoord;
  return ret;

}

TRIANGLE void GeometryMain(AttribArray<VertexDataOutput> tverts, uniform float4x4 modelViewProj) {

	emitVertex(tverts[0]);
	emitVertex(tverts[1]);
	emitVertex(tverts[2]);
	return;
}


bool rayTriIntersection(float3 origin, float3 direction, float3 tris[3])
{

  float3x3 tM = float3x3(tris[0].x, tris[1].x, tris[2].x,
                         tris[0].y, tris[1].y, tris[2].y,
                         tris[0].z, tris[1].z, tris[2].z);

  tM = inverse(tM);

  float3 q = mul(tM, origin);
  float3 r = mul(tM, direction);

  float t = (1.0f - (q.x + q.y + q.z)) / (r.x + r.y + r.z);

  if (t < 0.001f)
    return false;

  float3 barycc = q + r * t;

  if (barycc.x < 0.0f || barycc.y < 0.0f || barycc.z < 0.0f)
		return false;
  
  return true;
}

bool rayBoxIntersection(float3 origin, float3 direction, float3 box[36])
{
  for (int i = 0; i < 12; i++)
  {
    float3 tri[3] = { box[i * 3], box[i * 3 + 1], box[i * 3 + 2] };
    if (rayTriIntersection(origin, direction, tri))
      return true;
  }
  return false;
}


// guidelines for the fragment shader for A6.2, billboard rendering
// create billboard rectangle and texture as a preprocess
// turn on shader when rendering reflective teapot
// use conventional vertex shader, just projection
// shader uniform parameters: billboard vertices, billboard texture (sampler2D), eye 
//		(i.e. current position of the user, center of projection of output image)

// 1. compute eye ray, as difference between eye and surface point
// 2. reflect eye ray about normal to obtain reflected ray
// 3. intersect refleted ray with billboard rectangle
// 4. if intersection, lookup billboard texture at intersection point
		// 5. if color looked up is background, then no intersection, set  color to background
					// environment mapping for extra credit
		// 6. if color is not background, then set color to looked up color
// 6. if no intersection, set color to background (environment mapping for extra credit)

// guidelines for the soft shadow A6.3 question
// shader uniform parameters: light rectangle, the floor quad, the vertices of box 1,
//		the vertices of box 2
// shader algorithm
//		1. hard code sampling factor of light, sfl = 2 for 2x2, = 16 for 16x16
//		1.5 lv = sfl x sfl; // assume that none of the light samples are visible
//		2. for every light sample row i
//		3. for every light sample column j
//		4.	intersect ray(xyz, Lij) with all boxes
//		5.		if one intersection is found lv--, move on to next light sample
//		6. return color = input.color * lv / sfl / sfl;

PixelDataOutput FragmentMain(VertexDataOutput pdi, uniform sampler2D texture, int hasTexture,
  uniform float3 light[4], uniform float3 quadFloor[2], 
  uniform float3 box1[36], uniform float3 box2[36], uniform float3 box3[36]) 
{

  PixelDataOutput ret;

  float sfl = 16;
  float lv = sfl * sfl;
  
  float3 ldiffi = (light[1] - light[0]) / sfl;
  float3 ldiffj = (light[2] - light[0]) / sfl;

  for (int i = 0; i < sfl; i++)
  {
    for (int j = 0; j < sfl; j++)
    {
      float3 origin = pdi.vxyz;
      float3 Lij = light[0] + ldiffi * i + ldiffj * j;
      float3 direction = Lij - pdi.vxyz;
      
      bool intersection1 = rayBoxIntersection(origin, direction, box1);
      bool intersection2 = rayBoxIntersection(origin, direction, box2);
      bool intersection3 = rayBoxIntersection(origin, direction, box3);

      if (intersection1 || intersection2 || intersection3)
      {
        lv--;
      }
    }
  }

  ret.color = pdi.color * lv / sfl / sfl;
  return ret;
}